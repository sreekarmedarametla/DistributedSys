syntax="proto2";
option optimize_for = SPEED;
option java_package = "pipe.common";

/**
 * the accompanying information for all messages. Provides origination,
 * security, authentication, and tracking information
 */
message Header {  

   required int32 node_id = 1;
   required int64 time = 2; 
   optional int32 message_id = 3;  //New field Added    
   optional int32 destination = 4; 
   optional int32 max_hops = 5 [default = -1];

}

message Log{
	required WriteBody rwb=1;
	optional int32 newNodeId=2;
}
message AddNewNode{
	required string host = 1;
	required int32 port = 2;
}
 enum TaskType {        
 
        REQUESTREADFILE = 1;
        REQUESTWRITEFILE = 2;
        RESPONSEREADFILE = 3;
        RESPONSEWRITEFILE = 4;        
          
}
message Request {          
 	required TaskType requestType = 1;    
   
    oneof payload{
       WriteBody rwb = 2;
       ReadBody rrb = 3;      
    } 
   
}
message WriteBody{
   
   required string filename = 1;
   optional string file_ext=2;
   optional Chunk chunk=3;
   optional string file_id = 4;
   optional int32 num_of_chunks = 5;

}

message WriteResponse {
   optional int32 chunkId=1;
   optional string filename=2;   
   optional int32 NumOfChunks=51; 
   optional Chunk chunk=16;  
}

message Chunk{
	required int32 chunk_id = 1;
    required bytes chunk_data = 2;
    optional int32 chunk_size= 3;
}

message ReadBody{
   
   optional string filename = 1; // to get all use * wildcard
   optional string file_id = 2;
   optional int32 chunk_id = 3;
   optional int32 chunk_size = 4;
   
}

message ReadResponse{   
   required string filename = 1;
   required string file_ext = 2;
   optional int32 num_of_chunks = 3;
   repeated ChunkLocation chunk_location = 4;
   optional Chunk chunk = 5;
   optional string file_id=6;
}

message ChunkLocation{
   optional int32 chunkid = 1;
   repeated Node node = 2;
}

message Node{
   required int32 node_id = 1;
   required string host = 2;
   required int32 port = 3;
}



message Response{
	
	required TaskType responseType = 1; 
	optional string filename=2;	
	optional Status status=3;
	
	enum Status{
		 SUCCESS = 1;
		 SERVERTIMEOUT = 2; //if message got lost in intra cluster you need to send a resonpse back to client.
		 REDIRECTION = 3; // when leader sends a response back with location of chunks node.
		 FILENOTFOUND = 4; // no file was found on server
		 NOLEADER = 5; // cannot receive request, or must say client to stop sending request
		 UNREACHABLE = 6; //cluster to cluster communication stops working, broken link.
		 SERVICEDOWN = 7; //what if it has less number of nodes alive in cluster.
		 ERROR = 8; //similar to failure messages.
		 INCOMPLETE = 41;
 }
	
	oneof payload{
       WriteResponse writeResponse = 4;
       ReadResponse readResponse = 5;      
    }
	
}



message Failure {
    required int32 id = 1;
    optional int32 ref_id = 2;
    optional string message = 3;
}

